---
layout:     post
title:      "系统分析与设计 Homework - 2"
subtitle:   ""
date:       2018-03-22 17:00:00
author:     Dennis
header-img: ""
tags:
    - 学习
    - 系统分析与设计
    - Homework
---

## 1. 简答题

- 简述瀑布模型、增量模型、螺旋模型（含原型方法）的优缺点。

  <table>
    <tr>
      <th></th>
      <th width = "49%">优点</th>
      <th width = "49%">缺点</th>
    </tr>
    <tr>
      <th>瀑布模型</th>
      <td>
      1. 推迟软件实现，强调在软件实现前必须进行分析和设计工作<br />
      2. 降低软件开发的复杂过程，提高软件开发过程的透明性，提高软件开发过程的可管理性<br />
      3. 以项目的阶段评审和文档控制为手段有效地对整个开发过程进行指导，保证了阶段之间的正确限界，能够及时方发现并纠正开发过程中存在的缺陷，使产品达到预期的质量要求<br />
      </td>
      <td>
      1. 单一流程，不可逆，项目各阶段之间极少有反馈<br />
      2. 风险控制能力较弱只有在项目生命周期的后期才能看到结果<br />
      3. 缺乏灵活性，特别是无法解决软件徐企鹅不明确或不准确的问题<br />
      4. 软件活动由文档驱动，当阶段之间规定过多的文档时，会极大地增加系统的工作量<br />
      </td>
    </tr>
    <tr>
      <th>增量模型</th>
      <td>
      1. 增强客户对系统的信心<br />
      2. 降低系统失败风险<br />
      3. 提高系统可靠性<br />
      4. 提高系统的稳定性和可维护性<br />
      </td>
      <td>
      1. 增量粒度难以选择<br />
      2. 确定所有的基本业务服务比较困难<br />
      </td>
    </tr>
    <tr>
      <th>螺旋模型</th>
      <td>
      1. 设计上灵活，可以在项目的各个阶段进行变更<br />
      2. 以小的分段来构建大型系统，使成本计算变得简单容易<br />
      3. 客户始终参与每个阶段的开发，保证了项目不偏离正确方向以及项目的可控性<br />
      4. 随着项目推进，客户始终掌握项目的最新信息，从而能够和管理层有效地交互<br />
      </td>
      <td>
      1. 需要具有相当丰富的风险评估经验和专门知识，在风险较大的项目开发中，如果未能够及时标识风险，势必造成重大损失<br />
      2. 过多的迭代次数会增加开发成本，延迟提交时间<br />
      </td>
    </tr>
  </table>
  
- 简述UP的三大特点，其中哪些内容体现了用户驱动的开发，哪些内容体现风险驱动的开发？

  - **用例驱动**：用例是获取需求、制定计划、进行设计、测试、编写终端用户文档的驱动力量，体现了用户驱动开发。

  - **以体系结构为中心**：将软件开发过程要素和软件工件要素整合在统一的软件工程架构中，每一次迭代都包括需求、设计、实施、部署和测试活动，因此，每一个中间产品都得到了集成测试，而且这个集成测试在一个统一的软件体系结构指导下完成。

  - **迭代和增量**：迭代计划安排是风险驱动的，高风险因素集中在前两个阶段解决，特别是在体系结构级的风险在精化阶段就得到了解决，及早降低了系统风险。

- UP四个阶段的划分标准是什么？关键的里程碑是什么？

 　　RUP中的软件生命周期在时间上被分解为四个顺序的阶段：初始阶段（Inception）、精化阶段（Elaboration）、构建阶段（Construction）和产品交付阶段（Transition）,这是根据每个阶段的目标来进行划分的。每个阶段结束于一个主要的里程碑（Major Milestone），并在阶段借位执行一次评估以确定这个阶段的目标是否已经满足。如果评估结果令人满意的话，可以允许项目进入下一个阶段。具体如下表所示：
 <table>
  <tr>
    <th></th>
    <th width = "44%">目标</th>
    <th width = "44%">里程碑</th>
  </tr>
  <tr>
    <th>初始阶段</th>
    <td>为系统建立业务案例（Business Case）并确定项目的边界</td>
    <td>生命周期目标（Lifecycle Objective）里程碑：对重要文档进行评审，以确定正确理解用例需求、项目风险评估合理、阶段计划可行等</td>
  </tr>
  <tr>
    <th>精化阶段</th>
    <td>分析问题领域，建立健全的体系结构基础，编制项目计划，完成项目中高风险需求部分的开发</td>
    <td>生命周期体系结构（Lifecycle Architecture）里程碑：通过评审确定软件体系结构已经稳定、高风险的业务需求和技术机制已经解决、修订的项目计划可行等</td>
  </tr>
  <tr>
    <th>构建阶段</th>
    <td>完成所有剩余的技术构件和稳定业务需求功能的开发，并集成为产品，详细测试所有功能</td>
    <td>初始运行能力（Initial Operational Capability）里程碑：确定软件、环境、用户是否可以开始系统的运行</td>
  </tr>
  <tr>
    <th>产品交付阶段</th>
    <td>确保软件对最终用户是可用的</td>
    <td>产品发布（Product Release）里程碑：确定最终目标是否实现，是否应该开始产品的下一个版本的另一个开发周期</td>
  </tr>

 </table>

- IT项目管理中，“工期、质量、范围/内容”三个元素中，在合同固定条件下，为什么说“范围/内容”对项目团队是易于控制的

  　　在一个IT项目中，工期是在合同制定阶段，经过双方分析、协商后制定的，一般不能修改。而质量则是多方因素（工期、团队能力等）的综合体现，是较难以预测的，而范围/内容一般是由项目团队根据项目需求进行设计的一种实现方案，当方案实施过程出现问题或需求变化时，对范围/内容进行修改是必然的。

- 为什么说，UP为企业按固定节奏生产、固定周期发布软件产品提供了依据？

  　　因为UP将软件开发生命周期严格按**时间**划分为了四个**顺序**的阶段，每个阶段的目标都非常明确，结束于一个主要的里程碑。每阶段尾需要对该阶段结果进行评审，符合预估才能进入下一阶段，否则进行迭代修改。每阶段的成果都是清晰可见的，可以**量化管理**的，这就为企业按固定节奏生产、固定周期发布软件产品提供了依据

## 2. 项目管理使用

- 使用截图工具（png格式输出），展现你团队的任务Kanban，请注意以下要求
  - 每个人的任务是明确的。即一周后可以看到具体成果
  - 每个人的任务是1-2项
  - 至少包含一个团队活动任务

  ![Kanban-1](/img/in-post/SAAD-homework/hw2/kanban-1.png)
  ![Kanban-2](/img/in-post/SAAD-homework/hw2/kanban-2.png)
